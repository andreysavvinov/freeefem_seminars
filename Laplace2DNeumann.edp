
/* Domain geometry */
real ROut = 10.0; /* Radius of outer circle*/
real RIn = 0.5*ROut; /*Radius of inner circle*/

/* Boundary conditions*/
real uOut = 1.0;
real uIn = 2.0;

/* Exact solution calculation */
real C1 = (uOut - uIn) / log(ROut/RIn);
real C2 = uOut - C1*log(ROut);

func uExactFunc = 0.5*C1*log(x*x + y*y) + C2;
func g = C1 / sqrt(x^2 + y^2);

/* Mesh definition */
int NN = 50*2*2;
int NOut = NN;
int NIn =  int(RIn/ROut*NN);

int labelIn = 1;  /* label for inner circle*/
int labelOut = 2; /* label for outer circle*/

/* inner circle border definition*/
border GammaIn(t = 2*pi , 0.0){
    x = RIn *cos(t);
    y = RIn*sin(t);
    label = labelIn;
}

/* Outer circle border definition*/
border GammaOut(t = 0.0, 2*pi){
    x = ROut *cos(t);
    y = ROut*sin(t);
    label = labelOut;
}

plot(GammaIn(NIn) +  GammaOut(NOut), dim=2);

mesh Th = buildmesh(GammaIn(NIn) +  GammaOut(NOut));
plot (Th);

/*Finite element space definition*/

fespace Vh(Th,P1);
Vh u, v;



/*Bilinear forme definition for matrix*/

varf LaplaceBilinearForm(u,v) = 
    int2d(Th)(
        dx(u)*dx(v)+dy(u)*dy(v)
    )
    + on(labelIn, u = uIn);

/*Linear form definition for rhs*/

varf RhsLinearForm(u, v) =
    on(labelIn, u = uIn)
    + int1d(Th, labelOut)(g*v);

matrix A = LaplaceBilinearForm(Vh, Vh);

real[int] b = RhsLinearForm(0, Vh);

set(A, solver = sparsesolver);

u[] = A^-1*b; /* SLAE solution */

string plotTitle = "Laplace solution";

plot(Th, u, fill=true, dim=2, value=1, 
        nbiso=100, cmm=plotTitle );




Vh uExact = uExactFunc; /* Projection of exact solution onto Vh */

Vh uErrorAbs = abs(u - uExact);

real uErrorL2Norm = sqrt(
    int2d(Th)( (uErrorAbs)^2 )
);


real uExactL2Norm = sqrt(
    int2d(Th)( (uExact)^2 )
);

real uErrorRelL2Norm = uErrorL2Norm / uExactL2Norm;

cout << "|| uExact ||_L2 = " << uExactL2Norm << endl;

cout << "|| uErrorAbs ||_L2 = " << uErrorL2Norm << endl;

cout << " uRel = " << uErrorRelL2Norm << endl;