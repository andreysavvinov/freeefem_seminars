/*triangular rect mesh*/
int nx = 5;
int ny = 10;

real x0 = -2.0;
real x1 = 3.0;
real y0 = -1.0;
real y1 = 6.0;/*moshno i ne kadrat*/

mesh Th1 = square(nx,ny,
    [ x0+(x1-x0)*x, y0+(y1-y0)*y ]
    );/*tuta moshno i drugie treugolniki*/
//plot( Th1 );

/*basic global mesh info*/
int nbVertices = Th1.nv; /*Number of vertives */
int nbTriangles = Th1.nt; /* Number of triangles */
int nbBoundaryEdges = Th1.nbe; /*number of boundary edges */

cout<<"nbVertices"<< nbVertices <<endl;
cout<<"nbTriangles"<< nbTriangles <<endl;
cout<<"nbBoundaryEdges"<< nbBoundaryEdges <<endl;

/*Vertex coordinates*/
int iv=0;

cout << "Vertex # " << iv << "  : (x, y) = " << Th1(iv).x << ", " << Th1(iv).label <<endl;

for( int it = 0; it < Th1.nt; it++){

    cout << " Triangle #" << it << ":" << endl;
    cout << " Area = " << Th1[it].area <<endl;
    cout << " Region =" << Th1[it].region << endl;

    for( int ivloc = 0; ivloc <3; ivloc++ ){
        // TH1[it][ivloc] -vertex numnber (index)
        cout<< "(" << Th1[it][ivloc].x << ", "<<Th1[it][ivloc].y << ")" << endl;

    } 
}

for( int ibe = 0; ibe < Th1.nbe; ibe++ ){

    cout << "ibe = " << ibe
    << ":(" << Th1.be(ibe)[0].x << ", " << Th1.be(ibe)[0].y << ")-" 
    << ":(" << Th1.be(ibe)[1].x << ", " << Th1.be(ibe)[1].y << ")"
    <<  ", label = " << Th1.be(ibe).label
    << ", adjacent triangle = " << Th1.be(ibe).Element
    << endl;
    //whoinElement 
}

fespace Vh(Th1, P1);
Vh phi;

// for(int ibe = 0; ibe < Th1.nbe; ibe++ ){
//     int iv = Th1.be(ibe)[0];
//     phi = 0;
//     phi[][iv] = 1;
//     plot(Th1, phi, fill=1, dim=2, wait=1);
// }


real[int] xRect = [0, 1, 1, 0];
real[int] yRect = [0, 0, 1, 1];
int[int]  nRect = [4, 4, 5, 7]*4;
int lableRect = 0;

real[int] rCircle = [0.1, 0.05, 0.05, 0.1];
real[int] xCircle = [0.2, 0.8, 0.2, 0.8];
real[int] yCircle = [0.2, 0.8, 0.8, 0.2];
int[int] nCircle = [-10, -11, -12, 13]*5;
real[int] labelCircle = [1, 2, 3, 4];

border GammaCircle(t = 0.0, 2*pi; i ){
    x = xCircle[i] + rCircle[i]*cos(t);
    y = yCircle[i] + rCircle[i]*sin(t);
    label = labelCircle[i];
}

/* Rectangle boundary definition */

border GammaRectangle( t = 0.0, 1.0; i ){

    int iNext = (i+1)%nRect.n;
    real t1 = (1-t);
    x = xRect[i]*t1 + xRect[iNext]*t; 
    y = yRect[i]*t1 + yRect[iNext]*t;
    label = lableRect;
}

plot(GammaRectangle(nRect), dim = 2 );
mesh Th4 = buildmesh(
   GammaRectangle(nRect) + GammaCircle(nCircle)
);
plot(Th4);

cout << "Region = " << Th4(xCircle[3], xCircle[3]).region << endl;

int[int] regionChange = [3, 40, 0, 10]; //[old, new]
Th4 = change(Th4, region = regionChange);

cout << "Region New = " << Th4(xCircle[1]+0.1, yCircle[1]).region << endl;

// for homework
// {
//     .close
// }